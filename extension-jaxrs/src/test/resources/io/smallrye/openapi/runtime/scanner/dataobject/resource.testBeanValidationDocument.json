{
  "openapi": "3.0.3",
  "tags": [
    {
      "name": "Test",
      "description": "Testing the container"
    }
  ],
  "paths": {
    "/bv/test-container": {
      "post": {
        "tags": [
          "Test"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BVTestResourceEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BVTestContainer"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TestEnum": {
        "enum": [
          "ABC",
          "DEF"
        ],
        "type": "string"
      },
      "BVTestResourceEntity": {
        "type": "object",
        "required": [
          "enumValue"
        ],
        "properties": {
          "string_no_bean_constraints": {
            "type": ["string", "null"],
            "minLength": 10,
            "maxLength": 101
          },
          "big_int_no_bean_constraints": {
            "type": ["integer", "null"],
            "minimum": 101,
            "maximum": 101.999,
            "pattern": "^\\d{1,3}([.]\\d{1,3})?$"
          },
          "list_no_bean_constraints": {
            "type": ["array", "null"],
            "minItems": 0,
            "maxItems": 100,
            "items": {
              "type": "string"
            }
          },
          "map_no_bean_constraints": {
            "type": ["object", "null"],
            "minProperties": 0,
            "maxProperties": 100,
            "additionalProperties": {
              "type": "string"
            }
          },
          "enumValue": {
            "$ref": "#/components/schemas/TestEnum"
          }
        }
      },
      "BVTestContainer": {
        "type": "object",
        "required": [
          "arrayListNotNullAndNotEmptyAndMaxItems",
          "arrayListNullableAndMinItemsAndMaxItems",
          "mapObjectNotNullAndNotEmptyAndMaxProperties",
          "mapObjectNullableAndMinPropertiesAndMaxProperties",
          "stringNotBlankNotNull",
          "stringNotBlankDigits",
          "stringNotEmptyMaxSize",
          "stringNotEmptySizeRange",
          "booleanNotNull",
          "jacksonRequiredTrueString"
        ],
        "properties": {
          "arrayListNotNullAndNotEmptyAndMaxItems": {
            "type": "array",
            "minItems": 1,
            "maxItems": 20,
            "items": {
              "type": "string"
            }
          },
          "arrayListNullableAndMinItemsAndMaxItems": {
            "type": "array",
            "minItems": 5,
            "maxItems": 20,
            "items": {
              "type": "string"
            }
          },
          "booleanNotNull": {
            "type": "boolean"
          },
          "decimalMaxBigDecimalExclusiveDigits": {
            "type": "number",
            "exclusiveMaximum": 201.0,
            "pattern": "^\\d{1,3}([.]\\d)?$"
          },
          "decimalMaxBigDecimalInclusive": {
            "type": "number",
            "maximum": 201.0
          },
          "decimalMaxBigDecimalInvalidValue": {
            "type": "number"
          },
          "decimalMaxBigDecimalNoConstraint": {
            "type": "number"
          },
          "decimalMaxBigDecimalPrimaryDigits": {
            "type": "number",
            "maximum": 200.0,
            "pattern": "^\\d{1,3}([.]\\d{1,2})?$"
          },
          "decimalMinBigDecimalExclusiveDigits": {
            "type": "number",
            "exclusiveMinimum": 9,
            "pattern": "^\\d([.]\\d{1,2})?$"
          },
          "decimalMinBigDecimalInclusive": {
            "type": "number",
            "minimum": 9
          },
          "decimalMinBigDecimalInvalidValue": {
            "type": "number"
          },
          "decimalMinBigDecimalNoConstraint": {
            "type": "number"
          },
          "decimalMinBigDecimalPrimary": {
            "type": "number",
            "minimum": 10
          },
          "integerNegativeNotZeroMinValue": {
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": 0,
            "minimum": -1000000
          },
          "integerNegativeOrZeroMinValue": {
            "type": "integer",
            "format": "int32",
            "maximum": 0,
            "minimum": -999
          },
          "integerPositiveNotZeroMaxValue": {
            "type": "integer",
            "format": "int64",
            "maximum": 1000,
            "exclusiveMinimum": 0
          },
          "integerPositiveOrZeroMaxValue": {
            "type": "integer",
            "format": "int32",
            "maximum": 999,
            "minimum": 0
          },
          "mapObjectNotNullAndNotEmptyAndMaxProperties": {
            "type": "object",
            "minProperties": 1,
            "maxProperties": 20,
            "additionalProperties": {
              "type": "string"
            }
          },
          "mapObjectNullableAndMinPropertiesAndMaxProperties": {
            "type": "object",
            "minProperties": 5,
            "maxProperties": 20,
            "additionalProperties": {
              "type": "string"
            }
          },
          "stringNotBlankDigits": {
            "type": "string",
            "pattern": "^\\d{1,8}([.]\\d{1,10})?$"
          },
          "stringNotBlankNotNull": {
            "type": "string",
            "pattern": "\\S"
          },
          "stringNotEmptyMaxSize": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          "stringNotEmptySizeRange": {
            "type": "string",
            "minLength": 100,
            "maxLength": 2000
          },
          "jacksonRequiredTrueString": {
            "type": "string"
          },
          "jacksonDefaultString": {
            "type": "string"
          },
          "patternFromBV": {
            "type": "string",
            "pattern": "^something$"
          }
        }
      }
    }
  }
}
